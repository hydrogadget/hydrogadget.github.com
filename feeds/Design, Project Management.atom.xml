<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>HydroGadget</title><link href="http://hydrogadget.org/" rel="alternate"></link><link href="http://hydrogadget.org/feeds/Design,%20Project%20Management.atom.xml" rel="self"></link><id>http://hydrogadget.org/</id><updated>2012-11-19T00:00:00-08:00</updated><entry><title>Fire up Microsoft Project and find a PMP!</title><link href="http://hydrogadget.org/2012/11/19/fire-up-microsoft-project-and-find-a-pmp/" rel="alternate"></link><updated>2012-11-19T00:00:00-08:00</updated><author><name>Brian Munroe</name></author><id>tag:hydrogadget.org,2012-11-19:2012/11/19/fire-up-microsoft-project-and-find-a-pmp/</id><summary type="html">&lt;p&gt;Ok, not really...but Charles, Mike and myself have been meeting on a regular basis for about a month
now and we've come up with a dumptruck load of design requirments.  We've pared
it down to a few that we think we can make for the Feb 2nd LV Mini Maker
Faire deadline:&lt;/p&gt;
&lt;h3&gt;Phase One Reqirements&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Must be inexpensive to build.&lt;/li&gt;
&lt;li&gt;Must have a sensible and inuitive (web/mobile) interface.&lt;/li&gt;
&lt;li&gt;Must minimize waste - should act as a drop-in replacement for an existing residential
irrigation timer.&lt;/li&gt;
&lt;li&gt;THE BIG ONE:  Must be able to communicate with the public utility to determine
water restrictions.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Most of these requirements are pretty straightforward, but #4 is the most exciting
to me.  Before starting this project, I googled around and found plenty of DIY
sprinkler controllers, but none of them had the ability to communicate with a
third party.  &lt;/p&gt;
&lt;p&gt;Here in Southern Nevada (namely, Las Vegas), we have mandatory drought restriction
watering schedules.  These change on a quarterly basis and usually
customers are notifed via a postcard to change their watering schedules.&lt;/p&gt;
&lt;p&gt;With the HydroGadget, we want to elimate this hassle by allowing the system to
determine the restriction schedule and either adjust things automatically or
at least send an email / SMS reminder that things need to be adjusted.&lt;/p&gt;
&lt;h3&gt;Choosing Hardware for the Controller&lt;/h3&gt;
&lt;p&gt;As far as choosing a platform, the HydroGadget team members have been playing around with the &lt;a href="http://www.raspberrypi.org/"&gt;Raspberry Pi&lt;/a&gt; and we all think it will make an excellent controller for our project.&lt;/p&gt;
&lt;p&gt;We originally started to take some inspiration from &lt;a href="http://mightyohm.com/blog/about/"&gt;Jeff
Keyzer's&lt;/a&gt;&lt;a href="http://mightyohm.com/blog/2008/10/building-a-wifi-radio-part-1-introduction/"&gt;WiFi
Radio&lt;/a&gt;
project.  Jeff did a really good job of documenting this fantastic project and we
could easily see how it could be adapted to fit our project.  However we decided that
if we wanted to make a production run of these things then using a Wifi router as
our platform would be too wasteful (we'd have to throw away the case and the
router power supply) and it would also be very time consuming to add the required
serial header to the router mainboard.&lt;/p&gt;
&lt;p&gt;The Raspberry Pi is a very inexpensive (~$35US) and low power ARM based computer that runs Linux
and has enough general purpose Input-Output (GPIO) that we can control the
sprinkler valve solenoids without having to add a lot of extra components.&lt;/p&gt;</summary><category term="Hardware Startup"></category><category term="Raspberry Pi"></category></entry></feed>